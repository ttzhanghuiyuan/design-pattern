# 观察者模式

# 定义

观察者模式（Observer Pattern）是一种行为型设计模式，它定义了一种一对多的依赖关系，让多个观察者对象可以同时监听并收到某一主题对象状态的更新。当主题对象的状态发生变化时，它会通知所有的观察者，使它们能够自动更新自己。

# 结构

* 主题（Subject）：也称为被观察者，它维护一系列观察者对象，并提供添加、删除和通知观察者的方法。
* 具体主题（ConcreteSubject）：实现主题接口，维护观察者列表，并在状态发生变化时通知观察者。
* 观察者（Observer）：定义一个更新接口，使得在主题的状态变化时能够更新自己。
* 具体观察者（ConcreteObserver）：实现观察者接口，存储与主题的状态保持一致的状态，并在主题状态发生变化时更新自己。

# 优点

* 解耦：观察者模式可以将主题和观察者分开，使它们可以独立地变化，从而实现了解耦。
* 扩展性：观察者模式提供了良好的扩展性，可以方便地增加新的观察者和主题。

# 注意事项

* 避免循环依赖：在设计观察者模式时，需要注意避免循环依赖。
* 性能问题：观察者模式可能会导致性能问题，因为主题需要通知所有的观察者，设计时需要考虑性能问题。

# 适用场景

* 业务多变的关键节点例如：用户注册、订单支付等