# 定义

代理模式（Proxy Pattern）是一种结构型设计模式，它提供了一个代理对象来控制对其他对象的访问。代理模式在不改变原始对象的情况下，可以为其提供额外的功能，例如延迟加载、访问控制、缓存等。

# 结构

* 抽象主题（Subject）：定义了真实主题和代理主题的公共接口，可以是接口或抽象类。
* 真实主题（RealSubject）：定义了真正的对象，是代理对象所代表的真实对象。
* 代理（Proxy）：持有对真实主题的引用，并实现了抽象主题定义的接口。

# 优点

* 访问控制：代理模式可以控制对真实对象的访问，例如，延迟加载，只有在真正需要时才创建和访问真实对象。
* 增强功能：代理模式可以在不改变真实对象的情况下，为其增加额外的功能，例如，增加访问控制、缓存、日志等。
* 解耦：代理模式可以将客户端与真实对象解耦，客户端只需要与代理对象交互，而无需关心真实对象的具体实现。

# 注意事项

* 设计小心：过多地使用代理模式可能会导致系统中存在大量的代理类，设计时需要小心。
* 代理与真实对象：代理对象和真实对象应该实现相同的接口，以确保客户端可以无缝地切换和使用。

# 适用场景

* 缓存场景,代理层提供带缓存的功能，真实主题提供不带缓存的功能