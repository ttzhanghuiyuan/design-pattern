# 定义

装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许向现有对象添加新功能，同时又不改变其结构。装饰器模式通过将对象包装在装饰器对象中，来动态地扩展对象的功能。

# 结构

* 组件接口（Component）：定义了被装饰对象和装饰器对象共同的接口。
* 具体组件（ConcreteComponent）：实现组件接口，是被装饰对象。
* 装饰器（Decorator）：持有一个组件对象的引用，并实现组件接口，是所有装饰器的基类。
* 具体装饰器（ConcreteDecorator）：扩展装饰器对象的功能，可以有多个具体装饰器。

# 优点
* 动态扩展：通过装饰器模式，可以动态地为对象添加新功能，而无需修改其原始代码。
* 避免继承的复杂性：装饰器模式避免了使用大量子类来扩展对象的功能。


# 注意事项
* 设计小心：过多使用装饰器可能会导致系统中存在大量的装饰器类，设计需要小心。
* 适当性：装饰器模式最适用于需要动态地为对象添加新功能或行为的场景。